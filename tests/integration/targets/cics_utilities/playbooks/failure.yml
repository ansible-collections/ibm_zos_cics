# (c) Copyright IBM Corp. 2023,2024
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: CICS Version Failure Case
  hosts: "all"
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    ds_name: "{{ ansible_user | upper }}.TEST.UTIL.A{{ range(100, 999) | random }}B"

  tasks:
    # #############################################################################
    # ############################## Initial cleanup ##############################
    # #############################################################################

    - name: Set random ds path for test runs
      ansible.builtin.set_fact:
        ds_name: "{{ ds_name }}"

    - name: Delete data set if it exists
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ ds_name }}"
        state: absent
      register: delete_result

    - name: Debug
      ansible.builtin.debug:
        msg: "{{ delete_result }}"

    - name: Assert Delete Passed
      ansible.builtin.assert:
        that:
          - delete_result.failed == false

    ############################################################################
    # Fail to get CICS version from non-existent data set
    ############################################################################

    - name: Wrap test in block so cleanup always runs
      block:
      - name: Fail to get CICS version information from non-existent data set
        cics_version:
          CICS_HLQ: "{{ ds_name }}"
        register: result
        ignore_errors: true

      - name: Assert non-existent
        ansible.builtin.assert:
          that:
            - result.failed is true
            - result is not changed
            - result.rc == 1
            - "'exception' in result"

      ############################################################################
      # Create a empty data set
      ############################################################################
      - name: Create PDS data set
        ibm.ibm_zos_core.zos_data_set:
          name: "{{ ds_name }}.SDFHSAMP"
          type: pds
        retries: 10
        register: created_result
        until: created_result.failed is false
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ created_result }}"

      - name: Wait until created
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "{{ ds_name }}.SDFHSAMP"
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      - name: Create PDS Member
        ibm.ibm_zos_core.zos_data_set:
          name: "{{ ds_name }}.SDFHSAMP(DFH0SINX)"
          type: member
        retries: 10
        register: created_result
        until: created_result.failed is false
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ created_result }}"

      - name: Wait until created
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "DFH0SINX"
          pds_patterns:
            - "{{ ds_name }}.SDFHSAMP"
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      ############################################################################
      # Try to read empty data set
      ############################################################################

      - name: Fail to get CICS version information from empty data set
        cics_version:
          CICS_HLQ: "{{ ds_name }}"
        register: result
        ignore_errors: true

      - name: Assert failed on empty Member
        ansible.builtin.assert:
          that:
            - result.failed is true
            - result is not changed
            - result.rc != 0
            - "'exception' in result"

      ############################################################################
      # Create some data and read a non numeric STATUS value
      ############################################################################

      - name: Write data to the data set to test for STATUS field
        ibm.ibm_zos_core.zos_copy:
          content: STATUS = TEST
          dest: "{{ ds_name }}.SDFHSAMP(DFH0SINX)"
          force: True

      - name: Wait until written
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "DFH0SINX"
          pds_patterns:
            - "{{ ds_name }}.SDFHSAMP"
          contains: "STATUS = TEST"
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      - name: Get CICS version from new data set
        cics_version:
          CICS_HLQ: "{{ ds_name }}"
        register: result

      - name: Assert string content fails
        ansible.builtin.assert:
          that:
            - result is not changed
            - result.cics_version == 'TEST'
            - result.rc == 0
            - "'exception' not in result"

      ############################################################################
      # Create and read from data set where STATUS is EOF
      ############################################################################
          
      - name: Write data to the data set to test for no data after STATUS
        ibm.ibm_zos_core.zos_copy:
          content: "STATUS ="
          dest: "{{ ds_name }}.SDFHSAMP(DFH0SINX)"
          force: True
        register: res

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ res }}"

      - name: Wait until written
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "DFH0SINX"
          pds_patterns:
            - "{{ ds_name }}.SDFHSAMP"
          contains: "STATUS ="
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      - name: Attempt to read data from STATUS which is EOF
        cics_version:
          CICS_HLQ: "{{ ds_name }}"
        register: result
        ignore_errors: true

      - name: Assert status EOF fails
        ansible.builtin.assert:
          that:
            - result.failed is true
            - result is not changed
            - result.rc != 0
            - "'exception' in result"

      # #############################################################################
      # ################################# Teardown ##################################
      # #############################################################################

      always:
      - name: Delete data set
        ibm.ibm_zos_core.zos_data_set:
          state: absent
          name: "{{ ds_name }}.SDFHSAMP"
        register: delete_result

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ delete_result }}"


      - name: Assert Delete Passed
        ansible.builtin.assert:
          that:
            - delete_result.failed == false


    ############################################################################
    # Create and read from a SEQ data set
    ############################################################################

    - name: Wrap test in block so cleanup always runs
      block:
      - name: Create SEQ data set
        ibm.ibm_zos_core.zos_data_set:
          name: "{{ ds_name }}.SEQ"
          type: seq
        retries: 10
        register: created_result
        until: created_result.failed is false
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ created_result }}"

      - name: Wait until created
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "{{ ds_name }}.SEQ"
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      - name: Write data to SEQ data set
        ibm.ibm_zos_core.zos_copy:
          content: "STATUS = 1.0.0"
          dest: "{{ ds_name }}.SEQ"
          force: True

      - name: Wait until created
        ibm.ibm_zos_core.zos_find:
          patterns:
            - "{{ ds_name }}.SEQ"
          contains: "STATUS = 1.0.0"
        register: datasets
        until:
          - datasets is defined
          - datasets.data_sets is defined
          - datasets.data_sets != []
        retries: 10
        delay: 5

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ datasets }}"

      - name: Read version from SEQ data set
        cics_version:
          CICS_HLQ: "{{ ds_name }}"
        register: result
        ignore_errors: true

      - name: Assert Seq data set fails
        ansible.builtin.assert:
          that:
            - result.failed is true
            - result is not changed
            - "'exception' in result"

      # #############################################################################
      # ################################# Teardown ##################################
      # #############################################################################
      
      always:
      - name: Delete data set
        ibm.ibm_zos_core.zos_data_set:
          state: absent
          name: "{{ ds_name }}.SEQ"
        register: delete_result

      - name: Debug
        ansible.builtin.debug:
          msg: "{{ delete_result }}"

      - name: Assert Delete Passed
        ansible.builtin.assert:
          that:
            - delete_result.failed == false
