# (c) Copyright IBM Corp. 2021,2023
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: CMCI BAS Install Error Integration Test
  # Sets Up a full BAS resource assignment deployment. Checks to see where files will be installed and then
  # installs to two regions with a target scope and one related scope. Then attempts to install again and checks an error
  # occured with feedback and nested installerrors. Uninstalls and deletes everything created after

  hosts: all
  gather_facts: false
  vars:
    file1: "{{ cmci_program_name_1 }}"
    file2: "{{ cmci_program_name_2 }}"
    res_def: "{{ cmci_program_filter }}"
    resource_description: "{{ cmci_program_name_2 }}"
    resource_assignment: "{{ cmci_program_name_2 }}"
    resource_assignment_type_target: CICSRemoteFile
    resource_assignment_type_related: CICSLocalFile
    resource_group: "{{ cmci_program_name_1 }}"
    related_scope: "{{ cmci_scope }}"
    target_scope: "{{ cmci_scope_region_1 }}"
    def_ver: "1"

  module_defaults:
    ibm.ibm_zos_cics.cmci_get:
      cmci_host: "{{ cmci_host }}"
      cmci_port: "{{ cmci_secure_port }}"
      cmci_user: "{{ cmci_user }}"
      cmci_password: "{{ cmci_password }}"
      context: "{{ cmci_context }}"
      scope: "{{ cmci_scope }}"
      insecure: true

    ibm.ibm_zos_cics.cmci_update:
      cmci_host: "{{ cmci_host }}"
      cmci_port: "{{ cmci_secure_port }}"
      cmci_user: "{{ cmci_user }}"
      cmci_password: "{{ cmci_password }}"
      context: "{{ cmci_context }}"
      scope: "{{ cmci_scope }}"
      insecure: true

    ibm.ibm_zos_cics.cmci_delete:
      cmci_host: "{{ cmci_host }}"
      cmci_port: "{{ cmci_secure_port }}"
      cmci_user: "{{ cmci_user }}"
      cmci_password: "{{ cmci_password }}"
      context: "{{ cmci_context }}"
      scope: "{{ cmci_scope }}"
      insecure: true

    ibm.ibm_zos_cics.cmci_action:
      cmci_host: "{{ cmci_host }}"
      cmci_port: "{{ cmci_secure_port }}"
      cmci_user: "{{ cmci_user }}"
      cmci_password: "{{ cmci_password }}"
      context: "{{ cmci_context }}"
      scope: "{{ cmci_scope }}"
      insecure: true

    ibm.ibm_zos_cics.cmci_create:
      cmci_host: "{{ cmci_host }}"
      cmci_port: "{{ cmci_secure_port }}"
      cmci_user: "{{ cmci_user }}"
      cmci_password: "{{ cmci_password }}"
      context: "{{ cmci_context }}"
      scope: "{{ cmci_scope }}"
      insecure: true

  tasks:
    ##################################################################################
    # Initial cleanup
    ##################################################################################
    - name: Delete resource assignment
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceAssignmentDefinition
        resources:
          filter:
            resassgn: "{{ resource_assignment }}"
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']

    - name: Delete file1 definition
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSDefinitionFile
        resources:
          complex_filter:
            and:
              - attribute: NAME
                value: "{{ file1 }}"
              - attribute: DEFVER
                value: "{{ def_ver }}"
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']

    - name: Delete file2 definition
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSDefinitionFile
        resources:
          complex_filter:
            and:
              - attribute: NAME
                value: "{{ file2 }}"
              - attribute: DEFVER
                value: "{{ def_ver }}"
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']

    ###
    # DISABLE AND DISCARD file1 and file2 in each region it may be installed
    ###
    - name: Check if file1 is installed in target scope
      ansible.builtin.include_role:
        name: cmci_delete_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_target }}"
        context: "{{ cmci_context }}"
        scope: "{{ target_scope }}"
        attributes:
          FILE: "{{ file1 }}"

    - name: Check if file1 is installed in related scope
      ansible.builtin.include_role:
        name: cmci_disable_discard_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_related }}"
        context: "{{ cmci_context }}"
        scope: "{{ related_scope }}"
        attributes:
          FILE: "{{ file1 }}"

    - name: Check if file2 is installed in target scope
      ansible.builtin.include_role:
        name: cmci_delete_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_target }}"
        context: "{{ cmci_context }}"
        scope: "{{ target_scope }}"
        attributes:
          FILE: "{{ file2 }}"

    - name: Check if file2 is installed in related scope
      ansible.builtin.include_role:
        name: cmci_disable_discard_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_related }}"
        context: "{{ cmci_context }}"
        scope: "{{ related_scope }}"
        attributes:
          FILE: "{{ file2 }}"

    - name: Delete resource group
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceGroup
        resources:
          filter:
            resgroup: "{{ resource_group }}"
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']

    - name: Delete resource description
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceDescription
        resources:
          filter:
            resdesc: "{{ resource_description }}"
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']

    ##################################################################################
    # Main Test
    ##################################################################################
    - name: Create filedef1
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_create:
        type: CICSDefinitionFile
        attributes:
          name: "{{ file1 }}"
          defver: "{{ def_ver }}"
      register: result

    - name: Assert filedef created
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == file1

    - name: Create filedef2
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_create:
        type: CICSDefinitionFile
        attributes:
          name: "{{ file2 }}"
          defver: "{{ def_ver }}"
      register: result

    - name: Assert filedef created
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == file2

    - name: Create Resource Group
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_create:
        type: CICSResourceGroup
        attributes:
          resgroup: "{{ resource_group }}"
      register: result

    - name: Assert create resource group
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resgroup == resource_group

    - name: Add filedef1 to resource group
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_action:
        type: CICSDefinitionFile
        action_name: ADDTOGRP
        resources:
          filter:
            NAME: "{{ file1 }}"
            DEFVER: "{{ def_ver }}"
        action_parameters:
          - name: RESGROUP
            value: "{{ resource_group }}"
      register: result

    - name: Assert filedef added to resource group
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == file1

    - name: Add filedef2 to resource group
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_action:
        type: CICSDefinitionFile
        action_name: ADDTOGRP
        resources:
          filter:
            NAME: "{{ file2 }}"
            DEFVER: "{{ def_ver }}"
        action_parameters:
          - name: RESGROUP
            value: "{{ resource_group }}"
      register: result

    - name: Assert filedef added to resource group
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == file2

    - name: Create Resource Description
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_create:
        type: CICSResourceDescription
        attributes:
          resdesc: "{{ resource_description }}"
      register: result

    - name: Assert create resource description
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resdesc == resource_description

    - name: Create Resource Assignment
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_create:
        type: CICSResourceAssignmentDefinition
        attributes:
          resassgn: "{{ resource_assignment }}"
          usage: remote
          rscope: "{{ related_scope }}"
          tscope: "{{ target_scope }}"
          resgroup: "{{ resource_group }}"
          rdeftype: filedef
      register: result

    - name: Assert create resource assignment
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resassgn == resource_assignment
          - result.records[0].usage == 'REMOTE'
          - result.records[0].rscope == related_scope
          - result.records[0].tscope == target_scope
          - result.records[0].resgroup == resource_group
          - result.records[0].rdeftype == 'FILEDEF'

    - name: Add resource assignment to resource description
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_action:
        type: CICSResourceAssignmentDefinition
        action_name: ADDTODSC
        resources:
          filter:
            resassgn: "{{ resource_assignment }}"
        action_parameters:
          - name: RESDESC
            value: "{{ resource_description }}"
      register: result

    - name: Assert resource assignment added to resource description
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resassgn == resource_assignment

    - name: Install resource description
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_action:
        type: CICSResourceDescription
        action_name: INSTALL
        resources:
          filter:
            resdesc: "{{ resource_description }}"
      register: result

    - name: Assert install ok
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1

    - name: Check file where filedef will be deployed by resource assignmnet
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_get:
        type: CICSResourceByDescription
        resources:
          filter:
            resdesc: "{{ resource_description }}"
            resdef: "{{ res_def }}"
          get_parameters:
            - name: RESDESC
              value: "{{ resource_description }}"
      register: result

    - name: Assert where filedef will be installed
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 4

          - result.records[0].resdef == file1
          - result.records[0].rdeftype == 'FILEDEF'
          - result.records[0].resassgn == resource_assignment
          - result.records[0].resgroup == resource_group
          - result.records[0].rscope == related_scope

          - result.records[1].resdef == file1
          - result.records[1].rdeftype == 'FILEDEF'
          - result.records[1].resassgn == resource_assignment
          - result.records[1].resgroup == resource_group
          - result.records[1].tscope == target_scope

          - result.records[2].resdef == file2
          - result.records[2].rdeftype == 'FILEDEF'
          - result.records[2].resassgn == resource_assignment
          - result.records[2].resgroup == resource_group
          - result.records[2].rscope == related_scope

          - result.records[3].resdef == file2
          - result.records[3].rdeftype == 'FILEDEF'
          - result.records[3].resassgn == resource_assignment
          - result.records[3].resgroup == resource_group
          - result.records[3].tscope == target_scope

    - name: Check file1 was installed in target region
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_get:
        type: CICSRemoteFile
        scope: "{{ target_scope }}"
        resources:
          filter:
            file: "{{ file1 }}"
      retries: 3
      until: result is not failed
      register: result

    - name: Assert file1 was installed in target region
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].remotename == file1

    - name: Check file2 was installed in target region
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_get:
        type: CICSRemoteFile
        scope: "{{ target_scope }}"
        resources:
          filter:
            file: "{{ file2 }}"
      retries: 3
      until: result is not failed
      register: result

    - name: Assert file2 was installed in target scope
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].remotename == file2

    - name: Check file1 was installed in related scope
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_get:
        type: CICSLocalFile
        scope: "{{ related_scope }}"
        resources:
          filter:
            file: "{{ file1 }}"
      retries: 3
      until: result is not failed
      register: result

    - name: Assert file1 was installed in related scope
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].file == file1

    - name: Check file2 was installed in related scope
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_get:
        type: CICSLocalFile
        scope: "{{ related_scope }}"
        resources:
          filter:
            file: "{{ file2 }}"
      retries: 3
      until: result is not failed
      register: result

    - name: Assert file2 was installed in related scope
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].file == file2

    #####################################################
    # Test correct feedback given on installation error #
    #####################################################
    - name: Install resource description again
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_action:
        type: CICSResourceDescription
        action_name: INSTALL
        resources:
          filter:
            resdesc: "{{ resource_description }}"
      register: result
      failed_when: false

    - name: Assert feedback error is correct
      ansible.builtin.assert:
        that:
          - result.cpsm_response == 'TABLEERROR'
          - result.cpsm_reason == 'DATAERROR'
          - result.record_count == 1

          - result.feedback[0].installerror[0].resourcename == file1
          - result.feedback[0].installerror[0].eyu_cicsname == related_scope
          - result.feedback[0].installerror[0].resp == '16'
          - result.feedback[0].installerror[0].resp2 == '500'
          - result.feedback[0].installerror[0].resp_alt == 'INVREQ'
          - result.feedback[0].installerror[0].eibfn == '3014'
          - result.feedback[0].installerror[0].eibfn_alt == 'CREATE FILE'
          - result.feedback[0].installerror[0].resourceversion == '1'

          - result.feedback[0].installerror[1].resourcename == file2
          - result.feedback[0].installerror[1].eyu_cicsname == related_scope
          - result.feedback[0].installerror[1].resp == '16'
          - result.feedback[0].installerror[1].resp2 == '500'
          - result.feedback[0].installerror[1].resp_alt == 'INVREQ'
          - result.feedback[0].installerror[1].eibfn == '3014'
          - result.feedback[0].installerror[1].eibfn_alt == 'CREATE FILE'
          - result.feedback[0].installerror[1].resourceversion == '1'

          - result.feedback[1].action == 'INSTALL'
          - result.feedback[1].attribute1 == 'RESDESC'
          - result.feedback[1].errorcode == '29'

    ##################################################################################
    # Tear down
    ##################################################################################
    - name: Delete resource assignment
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceAssignmentDefinition
        resources:
          filter:
            resassgn: "{{ resource_assignment }}"
      register: result

    - name: Assert deleted resource assignment
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1

    - name: Delete filedef1
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSDefinitionFile
        resources:
          filter:
            name: "{{ file1 }}"
          get_parameters:
            - name: RESGROUP
              value: "{{ resource_group }}"
      register: result

    - name: Assert deleted filedef1
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1

    - name: Delete filedef2
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSDefinitionFile
        resources:
          filter:
            name: "{{ file2 }}"
          get_parameters:
            - name: RESGROUP
              value: "{{ resource_group }}"
      register: result

    - name: Assert deleted filedef2
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1

    - name: Delete resource group
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceGroup
        resources:
          filter:
            resgroup: "{{ resource_group }}"
      register: result

    - name: Assert deleted resource group
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1

    - name: Delete resource description
      delegate_to: localhost
      ibm.ibm_zos_cics.cmci_delete:
        type: CICSResourceDescription
        resources:
          filter:
            resdesc: "{{ resource_description }}"
      register: result

    - name: Assert deleted resource description
      ansible.builtin.assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1

    - name: Check if file1 is installed in target scope
      ansible.builtin.include_role:
        name: cmci_delete_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_target }}"
        context: "{{ cmci_context }}"
        scope: "{{ target_scope }}"
        attributes:
          FILE: "{{ file1 }}"

    - name: Check if file1 is installed in related scope
      ansible.builtin.include_role:
        name: cmci_disable_discard_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_related }}"
        context: "{{ cmci_context }}"
        scope: "{{ related_scope }}"
        attributes:
          FILE: "{{ file1 }}"

    - name: Check if file2 is installed in target scope
      ansible.builtin.include_role:
        name: cmci_delete_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_target }}"
        context: "{{ cmci_context }}"
        scope: "{{ target_scope }}"
        attributes:
          FILE: "{{ file2 }}"

    - name: Check if file2 is installed in related scope
      ansible.builtin.include_role:
        name: cmci_disable_discard_if_exists
      vars:
        resource_type: "{{ resource_assignment_type_related }}"
        context: "{{ cmci_context }}"
        scope: "{{ related_scope }}"
        attributes:
          FILE: "{{ file2 }}"
