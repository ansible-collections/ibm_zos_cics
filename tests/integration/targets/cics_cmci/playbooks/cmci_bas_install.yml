# Copyright (c) IBM Corporation 2021
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name:  CMCI Integration Test
  # Sets Up a full BAS resource assignment deployment. Checks to see where programs will be installed and then
  # installs to two regions with a target scope and one related scope. Uninstalls and deletes everything created after

  collections:
   - ibm.ibm_zos_cics
  hosts: 'localhost'
  gather_facts: 'false'
  vars:
    program: 'ANSIPROG'
    resource_description: 'ANSIDESC'
    resource_assignment: 'ANSIGMNT'
    resource_group: 'ANSIRGRP'
    related_scope: 'IYCWEMW1'
    region_one: 'IYCWEML1'
    region_two: 'IYCWEMM1'
    target_scope: 'ANSITARG'
    def_ver: '1'


  module_defaults:
    ibm.ibm_zos_cics.cmci_get:
      cmci_host: '{{ cmci_host }}'
      cmci_port: '{{ cmci_port }}'
      cmci_user: '{{ cmci_user }}'
      cmci_password: '{{ cmci_password }}'
      context: '{{ context }}'
      scope: '{{ scope }}'
      insecure: true

    ibm.ibm_zos_cics.cmci_update:
      cmci_host: '{{ cmci_host }}'
      cmci_port: '{{ cmci_port }}'
      cmci_user: '{{ cmci_user }}'
      cmci_password: '{{ cmci_password }}'
      context: '{{ context }}'
      scope: '{{ scope }}'
      insecure: true


    ibm.ibm_zos_cics.cmci_delete:
      cmci_host: '{{ cmci_host }}'
      cmci_port: '{{ cmci_port }}'
      cmci_user: '{{ cmci_user }}'
      cmci_password: '{{ cmci_password }}'
      context: '{{ context }}'
      scope: '{{ scope }}'
      insecure: true


    ibm.ibm_zos_cics.cmci_action:
      cmci_host: '{{ cmci_host }}'
      cmci_port: '{{ cmci_port }}'
      cmci_user: '{{ cmci_user }}'
      cmci_password: '{{ cmci_password }}'
      context: '{{ context }}'
      scope: '{{ scope }}'
      insecure: true


    ibm.ibm_zos_cics.cmci_create:
      cmci_host: '{{ cmci_host }}'
      cmci_port: '{{ cmci_port }}'
      cmci_user: '{{ cmci_user }}'
      cmci_password: '{{ cmci_password }}'
      context: '{{ context }}'
      scope: '{{ scope }}'
      insecure: true


  tasks:
    ##################################################################################
    # Initial cleanup
    ##################################################################################
    - name: 'Delete resource assignment'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceAssignmentDefinition'
        resources:
          filter:
            resassgn: '{{ resource_assignment }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete program definition'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSDefinitionProgram'
        resources:
          complex_filter:
            and:
              - attribute: NAME
                value: '{{ program }}'
              - attribute: DEFVER
                value: '{{ def_ver }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete program in region one'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ region_one }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete program in region two'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ region_two }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete program in related scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ related_scope }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete resource group'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceGroup'
        resources:
          filter:
            resgroup: '{{ resource_group }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete resource description'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceDescription'
        resources:
          filter:
            resdesc: '{{ resource_description }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    - name: 'Delete system group target scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSRegionGroup'
        resources:
          filter:
            group: '{{ target_scope }}'
      register: result
      failed_when: >
        'cpsm_response' not in result or result.cpsm_response not in ['OK', 'NODATA']


    ##################################################################################
    # Main Test
    ##################################################################################
    - name: 'Create progdef'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSDefinitionProgram'
        attributes:
          name: '{{ program }}'
          defver: '{{ def_ver }}'
      register: result

    - name: assert progdef created
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == program


    - name: 'Create Resource Group'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSResourceGroup'
        attributes:
          resgroup: '{{ resource_group }}'
      register: result

    - name: assert create resource group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resgroup == resource_group


    - name: 'Add progdef to resource group'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_action:
        type: 'CICSDefinitionProgram'
        action_name: 'ADDTOGRP'
        resources:
          filter:
            NAME: '{{ program }}'
            DEFVER: '{{ def_ver }}'
        action_parameters:
          - name: 'RESGROUP'
            value: '{{ resource_group }}'
      register: result

    - name: assert progdef added to resource group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].name == program


    - name: 'Create system group for target scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSRegionGroup'
        attributes:
          group: '{{ target_scope }}'
      register: result

    - name: assert create system group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].group == target_scope


    - name: 'Add region one to target scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSSystemToSystemGroup'
        attributes:
          group: '{{ target_scope }}'
          cicsname: '{{ region_one }}'
      register: result

    - name: assert region one added to system group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].group == target_scope
          - result.records[0].cicsname == region_one


    - name: 'Add region two to target scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSSystemToSystemGroup'
        attributes:
          group: '{{ target_scope }}'
          cicsname: '{{ region_two }}'
      register: result

    - name: assert region two added to system group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].group == target_scope
          - result.records[0].cicsname == region_two


    - name: 'Create Resource Description'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSResourceDescription'
        attributes:
          resdesc: '{{ resource_description }}'
      register: result

    - name: assert create resource description
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resdesc == resource_description


    - name: 'Create Resource Assignment'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_create:
        type: 'CICSResourceAssignmentDefinition'
        attributes:
          resassgn: '{{ resource_assignment }}'
          usage: 'remote'
          rscope: '{{ related_scope }}'
          tscope: '{{ target_scope }}'
          resgroup: '{{ resource_group }}'
          rdeftype: 'progdef'
      register: result

    - name: assert create resource assignment
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resassgn == resource_assignment
          - result.records[0].usage == 'REMOTE'
          - result.records[0].rscope == related_scope
          - result.records[0].tscope == target_scope
          - result.records[0].resgroup == resource_group
          - result.records[0].rdeftype == 'PROGDEF'


    - name: 'Add resource assignment to resource description'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_action:
        type: 'CICSResourceAssignmentDefinition'
        action_name: 'ADDTODSC'
        resources:
          filter:
            resassgn: '{{ resource_assignment }}'
        action_parameters:
          - name: 'RESDESC'
            value: '{{ resource_description }}'
      register: result

    - name: assert resource assignment added to resource description
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].resassgn == resource_assignment


    - name: 'Install resource description'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_action:
        type: 'CICSResourceDescription'
        action_name: 'INSTALL'
        resources:
          filter:
            resdesc: '{{ resource_description }}'
      register: result

    - name: assert install ok
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1


    - name: 'Check program where program will be deployed by resource assignmnet'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_get:
        type: 'CICSResourceByDescription'
        resources:
          filter:
            resdesc: '{{ resource_description }}'
            resdef: '{{ program }}'
          get_parameters:
            - name: 'RESDESC'
              value: '{{ resource_description }}'
      register: result

    - name: assert where program will be installed
      assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 3

          - result.records[0].resdef == program
          - result.records[0].rdeftype == 'PROGDEF'
          - result.records[0].resassgn == resource_assignment
          - result.records[0].resgroup == resource_group
          - result.records[0].rscope == related_scope

          - result.records[1].resdef == program
          - result.records[1].rdeftype == 'PROGDEF'
          - result.records[1].resassgn == resource_assignment
          - result.records[1].resgroup == resource_group
          - result.records[1].tscope == region_one

          - result.records[2].resdef == program
          - result.records[2].rdeftype == 'PROGDEF'
          - result.records[2].resassgn == resource_assignment
          - result.records[2].resgroup == resource_group
          - result.records[2].tscope == region_two


    - name: 'Check program was installed in region one'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_get:
        type: 'CICSProgram'
        scope: '{{ region_one }}'
        resources:
          filter:
            program: '{{ program }}'
      retries: 3
      until: result is not failed
      register: result

    - name: assert program was installed in region one
      assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].program == program


    - name: 'Check program was installed in region two'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_get:
        type: 'CICSProgram'
        scope: '{{ region_two }}'
        resources:
          filter:
            program: '{{ program }}'
      retries: 3
      until: result is not failed
      register: result

    - name: assert program was installed in region two
      assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].program == program


    - name: 'Check program was installed in related scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_get:
        type: 'CICSProgram'
        scope: '{{ related_scope }}'
        resources:
          filter:
            program: '{{ program }}'
      retries: 3
      until: result is not failed
      register: result

    - name: debug 2
      debug:
        msg: "{{ result }}"

    - name: assert program was installed in related scope
      assert:
        that:
          - result is not changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.records[0].program == program


    ##################################################################################
    # Tear down
    ##################################################################################
    - name: 'Delete resource assignment'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceAssignmentDefinition'
        resources:
          filter:
            resassgn: '{{ resource_assignment }}'
      register: result

    - name: assert deleted resource assignment
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete progdef'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSDefinitionProgram'
        resources:
          filter:
            name: '{{ program }}'
          get_parameters:
            - name: 'RESGROUP'
              value: '{{ resource_group }}'
      register: result

    - name: assert deleted progdef
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete resource group'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceGroup'
        resources:
          filter:
            resgroup: '{{ resource_group }}'
      register: result

    - name: assert deleted resource group
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete resource description'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSResourceDescription'
        resources:
          filter:
            resdesc: '{{ resource_description }}'
      register: result

    - name: assert deleted resource description
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete system group target scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSRegionGroup'
        resources:
          filter:
            group: '{{ target_scope }}'
      register: result

    - name: assert deleted system group target scope
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete program in region one'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ region_one }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result

    - name: assert program deleted in region one
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete program in region two'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ region_two }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result

    - name: assert program deleted in region two
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1


    - name: 'Delete program in related scope'
      delegate_to: 'localhost'
      ibm.ibm_zos_cics.cmci_delete:
        type: 'CICSProgram'
        scope: '{{ related_scope }}'
        resources:
          filter:
            program: '{{ program }}'
      register: result

    - name: assert program deleted in related scope
      assert:
        that:
          - result is changed
          - result.cpsm_response == 'OK'
          - result.record_count == 1
          - result.success_count == 1